{"version":3,"sources":["components/Loading.js","static/js/functions.js","components/Header.js","components/AnalyzingSection.js","components/LearningSection.js","components/InterpretingSection.js","components/TestResult.js","App.js","reportWebVitals.js","index.js"],"names":["Loading","props","className","state","scrollToBottom","target","destination","offsetTop","offsetHeight","document","scrollingElement","scrollTop","lerp","hidden","setTimeout","toast","text","color","time","toastDiv","createElement","setAttribute","innerHTML","getElementById","appendChild","remove","a","b","t","Header","id","style","onClick","getStartedHandler","href","rel","alt","src","AnalyzingSection","useState","cv","setCV","lowResolution","imread","dst","Mat","width","cols","height","rows","parseInt","dsize","Size","resize","INTER_AREA","imshow","delete","appear","onLoad","type","onChange","e","img","URL","createObjectURL","files","onload","mat","click","canvas","ctx","getContext","imgData","getImageData","data","i","length","colorAvg","sum","count","boundary","iData","ImageData","Uint8ClampedArray","putImageData","clearLettersHandler","toggleLoading","PixelsAggregator","Worker","postMessage","setLoadingStateHandler","onmessage","AnalyzeRequest","forEach","letter","addLetterHandler","finalizeHandler","terminate","onerror","message","TestRequest","showTestResultHandler","LearningSection","addToDBHandler","array","addToDB","letters","map","l","cid","letterImgData","learnedTexts","saveDataHandler","loadDataHandler","accept","multiple","LetterComponent","setLetter","submitted","setSubmitted","useEffect","tmp","pixelsToHex","Uint32Array","buffer","result","r","c","blue","toString","green","red","push","placeholder","value","CheckLetters","isLetterKnown","InterpretingSection","setText","class","Interpreter","X","images","y","texts","toggleLearnedHandler","TestResult","hideTestResult","App","setLetters","setTexts","imgs","setImgs","testResult","setTestResult","getStarted","setGetStarted","analyzed","setAnalyzed","learned","setLearned","loading","setLoading","loadingState","setLoadingState","toggleLearned","prev","backgroundImage","image","newList","jsonData","blob","Blob","JSON","stringify","saveAs","filesNum","reader","FileReader","evt","parse","readAsText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fbaee6d9.chunk.js","sourcesContent":["import { React } from 'react';\n\nconst Loading = (props) => {\n    return (\n        <div className=\"fixed flex flex-row justify-center items-center\n        w-screen h-screen z-30 animate__animated animate__fadeIn\">\n\n          <div className=\"bg-white animate-pulse sm:text-xl shadow-2xl \n          border-2 border-black rounded p-4\">\n            {props.state}\n          </div>\n\n        </div>\n    );\n}\n\nexport default Loading;","export const scrollToBottom = (target) => {\n    let destination = target.offsetTop + target.offsetHeight;\n\n    document.scrollingElement.scrollTop = lerp(\n        document.scrollingElement.scrollTop,\n        destination * 1.05,\n        0.05\n    );\n    \n    if (document.scrollingElement.scrollTop < destination) {\n        setTimeout(() => {\n            scrollToBottom(target);\n        }, 1000/60);\n    }\n    else {\n        target.hidden = true;\n        return true;\n    }\n}\n\nexport const toast = (text, color, time) => {\n    let toastDiv = document.createElement('div');\n    toastDiv.setAttribute(\n        'style', \n        `position: fixed; \n        z-index: 100;\n        bottom: 0;\n        left: 0;\n        margin: 10px;\n        padding: 20px;\n        border-radius: 15px; \n        text-alignment: center;\n        box-shadow: black 5px 5px;\n        color: white; \n        background-color: ${color};`);\n        \n    toastDiv.innerHTML = `<p>${text}</p>`;\n    document.getElementById('AnalyzingSection').appendChild(toastDiv);\n\n    setTimeout(() => toastDiv.remove(), time);\n}\n\nconst lerp = (a, b, t) => {\n    return (1-t)*a+b*t;\n}\n","import { React } from 'react';\nimport { scrollToBottom } from '../static/js/functions.js';\n\n\nconst Header = (props) => {\n    const getStarted = ({ target }) => {\n        props.getStartedHandler();\n        setTimeout(() => scrollToBottom(document.getElementById(\"Header\")), 1000);\n    }\n\n    return (\n        <div id=\"Header\" className=\"text-center h-screen overflow-hidden\"> \n            <div className=\"flex flex-col md:flex-row w-full h-full bg-black bg-opacity-25\n            animate__animated animate__fadeIn\">\n                \n                <div className=\"flex-1 p-5 select-none\n                flex flex-col justify-evenly\" style={{color: '#e7e7e7'}}>\n\n                    <div className=\"animate__animated animate__fadeIn\">\n                        <p className=\"text-3xl md:text-7xl font-semibold p-3 my-3 rounded\n                        hover:bg-opacity-30 hover:bg-black transition duration-300\">\n                            Arabic OCR (Beta)\n                        </p>\n                        <p className=\"md:text-xl font-semibold p-4 rounded\n                        hover:bg-opacity-30 hover:bg-black transition duration-300\">\n                            I've already done the hard work for you by breaking the words\n                            down into letters; now it's your responsibility to construct\n                            your own OCR programme by supplying the application with\n                            letter-image pairs. ^_^\n                        </p>\n                    </div>\n                    \n                    <div className=\"my-3\">\n                        <button className=\"sm:text-xl p-2 md:p-6 rounded border\n                        hover:bg-white hover:text-black transition\n                        animate__animated animate__fadeIn\"\n                        onClick={getStarted}>\n                            Get Started\n                        </button>\n                    </div>\n\n                    <div>\n                        Created by <a \n                        className=\"text-blue-200 font-semibold\"\n                        href=\"https://www.linkedin.com/in/mo-ehab/\" \n                        rel=\"noreferrer\" \n                        target=\"_blank\">\n                            Mahmoud Ehab\n                        </a>\n                    </div>\n                </div>\n\n                <div className=\"flex-1 p-5 bg-black bg-opacity-40\n                flex flex-col items-center justify-center\n                animate__animated animate__fadeInRight animate__delay-1s\">\n                    <img\n                        alt=''\n                        className=\"bg-black bg-opacity-70 rounded-xl\"\n                        src='OCR.gif'\n                    />\n                </div>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import { OpenCvProvider } from 'opencv-react';\nimport { React, useState } from 'react';\nimport { scrollToBottom, toast } from '../static/js/functions';\n\nconst AnalyzingSection = (props) => {\n    const [cv, setCV] = useState(null);\n\n    const uploadImage = () => {\n        document.getElementById('fileInput').click();\n    }\n    const pickImage = (e) => {\n        const img = document.createElement('img');\n        img.src = URL.createObjectURL(e.target.files[0]);\n\n        if (!img.src) return;\n\n        img.onload = () => {\n            let mat = cv.imread(img);\n            cv.imshow('canvas', mat);\n            mat.delete();\n\n            lowResolution();\n        }\n    }\n\n    const lowResolution = () => {\n        let src = cv.imread('canvas');\n        let dst = new cv.Mat();\n        \n        let width = src.cols;\n        let height = src.rows;\n\n        if (src.cols > 1000) {\n            height *= 1000 / width;\n            width *= 1000 / width;\n        }\n        else {\n            width = width/1.25;\n            height = height/1.25;\n        }\n        if (height > 1000) {\n            width *= 1000 / height;\n            height *= 1000 / height;\n        }\n\n        width = parseInt(width);\n        height = parseInt(height);\n\n        toast(\"Resolution: \" + width + \" x \" + height, \"#e1b12c\", 2500);\n\n        let dsize = new cv.Size(width, height);\n\n        // You can try more different parameters\n        cv.resize(src, dst, dsize, 0, 0, cv.INTER_AREA);\n        cv.imshow('canvas', dst);\n        src.delete(); dst.delete();\n    }\n\n    const optimizeImage = () => {\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        let imgData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n        // Make the img grayscale\n        for (let i = 0; i < imgData.length; i += 4) { \n            const colorAvg = (imgData[i] + imgData[i+1] + imgData[i+2]) / 3;\n            imgData[i] = colorAvg;\n            imgData[i+1] = colorAvg;\n            imgData[i+2] = colorAvg;\n        }\n\n        // Evaluate the best boundary\n        let sum = 0\n        let count = 0\n        for (let i = 0; i < imgData.length; i++) { \n            count += 1;\n            sum += imgData[i];\n        }\n        const boundary = sum / count;\n\n        // Change image colors\n        for (let i = 0; i < imgData.length; i += 4) { \n            if (imgData[i] > boundary/1.5) {\n                imgData[i] = 0;\n                imgData[i+1] = 0;\n                imgData[i+2] = 0;\n            }\n            else {\n                imgData[i] = 255;\n                imgData[i+1] = 255;\n                imgData[i+2] = 255;\n            }\n        }\n\n        // Instantiate ImageData Object and use it in ctx\n        let iData = new ImageData(\n            new Uint8ClampedArray(imgData), \n            canvas.width, \n            canvas.height\n        );\n        ctx.putImageData(iData, 0, 0);\n    }\n\n    // Analyze Image Function\n    const analyze = () => {\n        props.clearLettersHandler();\n        props.toggleLoading();\n\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n\n        const PixelsAggregator = new Worker('./WebWorkers/PixelsAggregator.js');\n        PixelsAggregator.postMessage({\n            imgData: ctx.getImageData(0, 0, canvas.width, canvas.height).data,\n            width: ctx.getImageData(0, 0, canvas.width, 1).data.length\n        });\n        props.setLoadingStateHandler('Preprocessing...');\n\n        PixelsAggregator.onmessage = (e) => {\n            props.setLoadingStateHandler('Analyzing data...');\n\n            // AnalyzeRequest Worker takes turn\n            const AnalyzeRequest = new Worker('./WebWorkers/AnalyzeRequest.js');\n            AnalyzeRequest.postMessage({\n                imgData: e.data\n            });\n            AnalyzeRequest.onmessage = (e) => {\n                let letters = e.data;\n                \n                letters.forEach((letter, i) => {\n                    props.addLetterHandler(letter);\n                });\n\n                props.finalizeHandler();\n                scrollToBottom(document.getElementById('AnalyzingSection'));\n                AnalyzeRequest.terminate();\n            }\n            AnalyzeRequest.onerror = (e) => {\n                props.toggleLoading();\n                toast('AnalyzeRequest: ' + e.message, '#321213', 5000);\n                AnalyzeRequest.terminate();\n            }\n\n            PixelsAggregator.terminate();\n        }\n        PixelsAggregator.onerror = (e) => {\n            props.toggleLoading();\n            toast('PixelsAggregator: ' + e.message, '#321213', 5000);\n            PixelsAggregator.terminate();\n        }\n    }\n\n    // Test function\n    const test = () => {\n        props.toggleLoading();\n\n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n\n        const PixelsAggregator = new Worker('./WebWorkers/PixelsAggregator.js');\n        PixelsAggregator.postMessage({\n            imgData: ctx.getImageData(0, 0, canvas.width, canvas.height).data,\n            width: ctx.getImageData(0, 0, canvas.width, 1).data.length\n        });\n        props.setLoadingStateHandler('Preprocessing...');\n\n        PixelsAggregator.onmessage = (e) => {\n            props.setLoadingStateHandler('Analyzing data...');\n\n            // TestRequest Worker takes turn\n            const TestRequest = new Worker('./WebWorkers/TestRequest.js');\n            TestRequest.postMessage({\n                imgData: e.data\n            });\n            TestRequest.onmessage = (e) => {\n                props.toggleLoading();\n                props.showTestResultHandler(e.data);\n                TestRequest.terminate();\n            }\n            TestRequest.onerror = (e) => {\n                props.toggleLoading();\n                toast('TestRequest: ' + e.message, '#321213', 5000);\n                TestRequest.terminate();\n            }\n\n            PixelsAggregator.terminate();\n        }\n        PixelsAggregator.onerror = (e) => {\n            props.toggleLoading();\n            toast('PixelsAggregator: ' + e.message, '#321213', 5000);\n            PixelsAggregator.terminate();\n        }\n    }\n\n    // Load OpenCV lib\n    const onLoaded = (cv) => {  \n        setCV(cv);\n    }\n\n    return ( props.appear &&\n        <OpenCvProvider onLoad={onLoaded}>\n        <div id=\"AnalyzingSection\"\n        className=\"flex flex-col-reverse sm:flex-row bg-gray-800 bg-opacity-80\n        items-center h-auto sm:h-screen p-3 animate__animated animate__fadeIn\">\n\n            <div className=\"flex flex-col flex-1 w-full bg-black bg-opacity-30\n            h-full rounded overflow-hidden\">\n                {!cv && \n                    <p className='text-white text-3xl m-auto'>\n                        Loading OpenCV.js...\n                    </p>\n                }\n                {cv && \n                    <div className=\"flex flex-col h-full\">\n                    <input \n                        type=\"file\" \n                        id=\"fileInput\" \n                        className={'hidden'}\n                        onChange={pickImage} \n                    />\n\n                    <button \n                    className=\"bg-gray-200 p-3 shadow-inner\n                    hover:bg-black hover:text-white transition\"\n                    onClick={uploadImage}> \n                        Upload Image\n                    </button>\n\n                    <div className=\"h-full shadow overflow-auto\">\n                        <canvas id=\"canvas\" className=\"w-full\"></canvas>\n                    </div>\n                    \n                    <button \n                    className=\"bg-black bg-opacity-30 p-3\n                    hover:bg-black text-white transition\"\n                    onClick={lowResolution}> \n                        Low Resolution\n                    </button>\n\n                    <button \n                    className=\"bg-black bg-opacity-30 p-3\n                    hover:bg-black text-white transition\"\n                    onClick={optimizeImage}> \n                        Optimize / Switch White-Black\n                    </button>\n\n                    <button \n                    className=\"bg-black bg-opacity-30 p-3\n                    hover:bg-black text-white transition\"\n                    onClick={analyze}> \n                        Analyze\n                    </button>\n                    </div>\n                }\n            </div>\n\n            <div className=\"flex flex-col flex-1 p-6 overflow-auto\n            bg-black bg-opacity-10 h-full text-white\">\n                \n                <div className=\"select-none\">\n                    <h1 className=\"text-2xl font-bold my-1\">\n                        Analyzing Section\n                    </h1>\n                    <p className=\"text-justify mb-4\">\n                        Here's where the action happens: upload your text image, \n                        then click the \"Analyze\" button at the bottom to begin \n                        breaking it down into letters, so we can start the learning phase.\n                        But before that, if the image isn't already black-and-white, you shall \n                        convert it. You might also reduce the resolution of the image if needed, \n                        and lastly you may wish to put the algorithm to the test first.\n                    </p>\n                    \n                    <h1 className=\"text-2xl font-bold my-1\">\n                        Optimizing The Image\n                    </h1>\n                    <p className=\"text-justify mb-4\">\n                        Once you click the \"Optimize\" button at the bottom, the image \n                        will be converted into black-and-white, that will eliminate pixelization.\n                        <span className=\"font-bold\"> Keep in mind that the text must be provided in black. </span>\n                    </p>\n\n                    <h1 className=\"text-2xl font-bold my-1\">\n                        Low Resolution\n                    </h1>\n                    <p className=\"text-justify mb-4\">\n                    The image's resolution is automatically lowered after it is uploaded,\n                    in order to obtain a greater level of performance. However, you can \n                    reduce the resolution even more by pressing the 'Low Resolution' button,\n                    it'll reduce the resolution by a fifth which is not usually required as the \n                    automatic execution do well.\n                    </p>\n\n                    <h1 className=\"text-2xl font-bold my-1\">\n                        Testing\n                    </h1>\n                    <p className=\"text-justify mb-4\">\n                    Actually, the test button is meant to be used for illustrative purposes only, \n                    to examine what's going on behind the scenes.\n                    </p>\n\n                </div>\n\n                {cv && <button className=\"text-white font-black w-1/3 m-auto p-3 \n                rounded border-2 border-white hover:bg-gray-900 transition\"\n                onClick={test}>\n                    Test\n                </button>}\n            </div>\n            \n        </div>\n        </OpenCvProvider>\n    );\n}\n\nexport default AnalyzingSection;","import { React, useState, useEffect } from 'react';\n\nconst LearningSection = (props) => {\n    const addToDBHandler = (text, array) => {\n        props.addToDB(text, array);\n    }\n\n    const loadFile = () => {\n        const input = document.getElementById('loadFileInput');\n        input.click();\n    }\n\n    return ( props.appear ?\n        <div id='LearningSection' \n        className={`flex flex-col h-screen h-auto items-center bg-gray-200 p-8 shadow \n        animate__animated animate__fadeInLeft animate__slow`}>\n            \n            <div className=\"flex sm:flex-row flex-col flex-1 justify-around\n            w-full overflow-hidden\">\n\n                <div className={`flex sm:flex-col flex-row-reverse justify-between overflow-y-hidden\n                w-auto lg:w-1/3 sm:overflow-y-scroll rounded sm:shadow-xl`}>\n                    {props.letters.map(\n                        (l, i) => \n                        <LetterComponent \n                            cid={i} \n                            letterImgData={l} \n                            addToDB={addToDBHandler} \n                        />\n                    )}\n                </div>\n                    \n                <div className={`w-auto h-1/3 sm:h-full sm:w-1/3 rounded sm:shadow-xl`}>\n                    <CheckLetters learnedTexts={props.learnedTexts} />\n                </div>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row justify-around mt-6 w-full bg-white\">\n                <button className=\"hover:bg-green-300 hover:text-white py-3 sm:w-1/3 duration-300\"\n                onClick={props.saveDataHandler}>\n                    Save\n                </button>\n\n                <button className=\"relative hover:bg-green-300 hover:text-white\n                py-3 sm:w-1/3 duration-300\" onClick={loadFile}>\n                    Load\n                    <input\n                        id=\"loadFileInput\"\n                        className=\"hidden\"\n                        onChange={props.loadDataHandler}\n                        type=\"file\" \n                        accept=\".json\"\n                        multiple\n                    />\n                </button>\n\n                <button className=\"hover:bg-green-400 hover:text-white py-3 sm:w-1/3 duration-300\"\n                onClick={props.finalizeHandler}>\n                    Submit\n                </button>\n            </div>\n\n        </div> : <div id='learningSection'></div>\n    );\n}\n\nexport default LearningSection;\n\n\nconst LetterComponent = (props) => {\n    const [letter, setLetter] = useState('');\n    const [submitted, setSubmitted] = useState(false);\n\n    useEffect(() => {\n        // Skip the space letter\n        if (!props.letterImgData.length) return;\n        \n        // Get the Canvas & CanvasContext\n        let canvas = document.getElementById(props.cid);\n        let ctx = canvas.getContext('2d');\n\n        // Initialize some variables to the letter properties\n        let letter = props.letterImgData;\n        let width = letter[0].length;\n        let height = letter.length;\n\n        canvas.width = width > 100 ? width * 2 : 100;\n        canvas.height = height > 100 ? height * 2 : 100;\n\n        // Initialize the letter ImageData (iData)\n        let tmp = pixelsToHex(letter);\n        let array = new Uint32Array(width * height);\n        for(let i=0; i < array.length; i++) array[i] = parseInt(tmp[i]);\n        let iData = new ImageData(new Uint8ClampedArray(array.buffer), width, height);\n\n        // Draw The letter in the canvas\n        ctx.putImageData(iData, (canvas.width-width)/2, (canvas.height-height)/2);\n    });\n\n    // Mutate pixels matrix to be suitable for canvas\n    const pixelsToHex = (array) => {\n        let result = [];\n    \n        for (let r = 0; r < array.length; r++) {\n            for (let c = 0; c < array[r].length; c++) {\n                let blue = array[r][c][2].toString(16);\n                let green = array[r][c][1].toString(16);\n                let red = array[r][c][0].toString(16);\n                \n                if (blue.length < 2) blue += blue;\n                if (green.length < 2) green += green;\n                if (red.length < 2) red += red;\n                \n                result.push(\"0xff\" + blue + green + red);\n            }\n        }\n    \n        return result;\n    }\n\n    const onTextLetterChange = (e) => {\n        setLetter(e.target.value);\n    }\n\n    const addToDBHandler = () => {\n        props.addToDB(letter, props.letterImgData);\n        setSubmitted(true);\n    }\n\n    // return JSX statement\n    return ( props.letterImgData.length ?\n        <div className={`flex flex-col justify-evenly h-full m-2 p-6 rounded\n        ${submitted && 'animate-letterDisappear'}`}>\n\n            <canvas id={props.cid} className={`bg-white rounded shadow mb-2`}>\n            </canvas>\n\n            <div className=\"flex flex-col\">\n                {submitted || <input\n                    type=\"text\"\n                    className=\"p-2 mb-1 rounded shadow\"\n                    placeholder=\"What's the above letter?\"\n                    onChange={onTextLetterChange}\n                    value={letter}\n                />}\n\n                {submitted || \n                <button className=\"p-2 bg-green-500 hover:bg-white text-white\n                hover:text-green-500 rounded duration-200\"\n                onClick={addToDBHandler}>\n                    Submit\n                </button>}\n            </div>\n        </div> : ''\n    );\n}\n\n\nconst CheckLetters = (props) => {\n    const alphabet = ['أ', 'إ', 'ا','ال', 'ب', 'ت', 'ث', 'ج', 'ح', 'خ', 'د', 'ذ',\n    'ر', 'ز', 'س', 'ش', 'ص', 'ض', 'ط', 'ظ', 'ع', 'غ', 'ف', 'ق', 'ك', 'ل','لا', 'م', 'ن', 'ه', 'و', 'ي'];\n\n    // Check if a specific letter is in learnedTexts list\n    const isLetterKnown = (letter) => {\n        for (let i = 0; i < props.learnedTexts.length; i++) {\n            if (props.learnedTexts[i] === letter) return true;\n        }\n\n        return false;\n    }\n    \n    // return JSX statement\n    return (\n        <div className=\"w-full h-full bg-red-300 overflow-y-scroll divide-y\">\n        {\n            alphabet.map((l) => \n                <div className={`flex flex-row justify-between p-2 ${isLetterKnown(l) ? 'bg-green-400' : 'bg-red-400'}`}>\n                    <label className=\"text-white\">{isLetterKnown(l) ? 'تم' : 'معلق'}</label>\n                    <label className=\"text-white text-xl\">{l}</label>\n                </div>\n            )\n        }\n        </div>\n    );\n}","import { React, useState } from 'react';\nimport { toast } from '../static/js/functions';\n\nconst InterpretingSection = (props) => {\n    const [text, setText] = useState('');\n\n    const getText = () => {\n        // Interpreter Worker takes turn\n        const Interpreter = new Worker('./WebWorkers/Interpreter.js');\n        Interpreter.postMessage({\n            target: props.letters,\n            X: props.images,\n            y: props.texts\n        });\n        Interpreter.onmessage = (e) => {\n            const letters = e.data;\n\n            let text = \"\";\n            letters.forEach(letter => {\n                text += letter;\n            });\n            setText(text);\n\n            Interpreter.terminate();\n        }\n        Interpreter.onerror = (e) => {\n            toast('Interpreter: ' + e.message, '#321213', 5000);\n            Interpreter.terminate();\n        }\n    }\n\n    return (\n        <div className={`flex flex-col w-screen h-screen fixed bg-black bg-opacity-25 z-10\n        justify-evenly items-center`}>\n\n            <div className=\"flex flex-col w-screen h-screen justify-evenly items-center\n            animate__animated animate__jackInTheBox\">\n\n            <div className=\"flex flex-col w-1/2 md:w-1/3 rounded\">\n                <a className=\"text-center sm:text-xl text-bold text-white\n                hover:text-blue-600 bg-blue-500 hover:bg-gray-200 transition\n                mb-3 py-3 rounded shadow\"\n                href=\"https://www.linkedin.com/in/mo-ehab\"\n                target=\"_blank\"\n                rel=\"noreferrer\">\n                    <p>Contact me</p>\n                </a>\n\n                <a className=\"text-center sm:text-xl text-bold text-white\n                hover:text-gray-900 bg-gray-800 hover:bg-gray-200 transition\n                mb-3 py-3 rounded shadow\"\n                href=\"https://github.com/Mahmoud-Ehab/arabic-ocr\"\n                target=\"_blank\"\n                rel=\"noreferrer\">\n                    <p>GitHub - Source Code</p>\n                </a>\n            </div>\n\n            <a href=\"https://www.buymeacoffee.com/MoEhab\" \n            className=\"flex justify-center\"\n            target=\"_blank\"\n            rel=\"noreferrer\">\n                <img className=\"shadow hover:shadow-lg transition\"\n                src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" \n                alt=\"Buy Me A Coffee\" \n                width=\"217\"\n                height=\"60\"/>   \n            </a>\n\n            <div className=\"flex flex-col bg-gray-100 w-96 p-6 rounded shadow\">\n                {text && <p class='text-right overflow-y-scroll break-words \n                select-all w-full flex-grow p-3'>\n                    {text}\n                </p>}\n                \n                {!text && <button className=\"shadow p-3\"\n                onClick={getText}>\n                    Show Text\n                </button>}\n            </div>\n\n            <button className=\"text-white text-2xl\"\n            onClick={props.toggleLearnedHandler}>\n                X\n            </button>\n\n            </div>\n        </div>\n    );\n}\n\nexport default InterpretingSection;","import React from 'react';\nimport { useEffect } from \"react\";\n\nconst TestResult = (props) => {\n    const closeHandler = () => {\n        props.hideTestResult();\n    }\n\n    useEffect(() => {\n        // Get the Canvas & CanvasContext\n        let canvas = document.getElementById('canvas');\n        let ctx = canvas.getContext('2d');\n\n        // Initialize some variables to the letter properties\n        let letter = props.result;\n        let width = letter[0].length;\n        let height = letter.length;\n\n        // Initialize the letter ImageData (iData)\n        let tmp = pixelsToHex(letter);\n        let array = new Uint32Array(width * height);\n        for(let i=0; i < array.length; i++) array[i] = parseInt(tmp[i]);\n        let iData = new ImageData(new Uint8ClampedArray(array.buffer), width, height);\n\n        // Draw The letter in the canvas\n        ctx.putImageData(iData, (canvas.width-width)/2, (canvas.height-height)/2);\n    })\n\n    // Mutate pixels matrix to be suitable for canvas\n    const pixelsToHex = (array) => {\n        let result = [];\n    \n        for (let r = 0; r < array.length; r++) {\n            for (let c = 0; c < array[r].length; c++) {\n                let blue = array[r][c][2].toString(16);\n                let green = array[r][c][1].toString(16);\n                let red = array[r][c][0].toString(16);\n                \n                if (blue.length < 2) blue += blue;\n                if (green.length < 2) green += green;\n                if (red.length < 2) red += red;\n                \n                result.push(\"0xff\" + blue + green + red);\n            }\n        }\n    \n        return result;\n    }\n\n    return (\n        <div className=\"fixed flex flex-col justify-center items-center text-white\n        w-screen h-screen z-30 animate__animated animate__jackInTheBox select-none\"\n        onClick={closeHandler}>\n\n            <canvas id=\"canvas\" className={`bg-white rounded shadow`}>\n            </canvas>\n\n            <p className=\"w-3/4 sm:w-1/2 text-center my-6 p-3\n            bg-black bg-opacity-75 rounded\">\n                The red horizontal row is the 'DecisionRow', it has been located \n                automatically in a way that makes it feasible to go through the word \n                and extract letters from it whenever the row hits a black pixel. \n                The vertical lines should be positioned in a way that proparly \n                decompise the word into letters.\n            </p>\n\n            <p className=\"w-3/4 sm:w-1/2 text-center p-3\n            bg-black bg-opacity-75 rounded\">\n                For best results: You may presume that Arabic has 756 letters instead of 28.\n            </p>\n        </div>\n    );\n}\n\nexport default TestResult;","// Importing statics\nimport './static/css/animate.css';\n\n// Importing Components\nimport Loading from './components/Loading.js';\nimport Header from './components/Header.js';\nimport AnalyzingSection from './components/AnalyzingSection.js';\nimport LearningSection from './components/LearningSection.js';\nimport InterpretingSection from './components/InterpretingSection.js';\nimport TestResult from './components/TestResult.js';\n\nimport { React, useState } from 'react';\nimport { saveAs } from 'file-saver';\n\n\nfunction App() {\n  // Hooks\n  // The letters that meant to be recognized\n  const [letters, setLetters] = useState([]);\n  // The Data used in ml module.\n  const [texts, setTexts] = useState([]);\n  const [imgs, setImgs] = useState([]);\n\n  const [testResult, setTestResult] = useState(null);\n\n  // Some Hooks for loading layout purpose\n  const [getStarted, setGetStarted] = useState(false);\n  const [analyzed, setAnalyzed] = useState(false);\n  const [learned, setLearned] = useState(false);\n\n  const [loading, setLoading] = useState(false);\n  const [loadingState, setLoadingState] = useState('');\n\n  // Add letters using letters hook... is implemented while analyzing\n  const addLetter = (letter) => {\n    setLetters((prev) => {\n      let newList = [...prev];\n      newList.push(letter);\n      return newList;\n    });\n  }\n\n  // Called after hitting the analyze button to reset every thing\n  const clear = () => {\n    setLetters([]);\n    setTexts([]);\n    setImgs([]);\n  }\n\n  // Called when hitting any submit button in learning section\n  // Adds new text to learn and its img pixels using hooks.\n  const addToDBListener = (text, img) => {\n    setTexts((prev) => {\n      let newList = [...prev];\n      newList.push(text);\n      return newList;\n    });\n\n    setImgs((prev) => {\n      let newList = [...prev];\n      newList.push(img);\n      return newList;\n    });\n  }\n\n  const showTestResult = (image) => {\n    setTestResult(image);\n  }\n  const hideTestResult = () => {\n    setTestResult(null);\n  }\n\n  // Save the learned data as a json file in local machine\n  const saveLearningData = () => {\n    let jsonData = {\n      images: imgs,\n      texts: texts\n    }\n    let blob = new Blob([JSON.stringify(jsonData)], {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"ArabicOCR-LearningData.json\");\n  }\n\n  // Load saved data files  from local machine\n  const loadLearingData = (e) => {\n    setTexts([]);\n    setImgs([]);\n    const files = e.target.files;\n    const filesNum = files.length;\n\n    for (let i = 0; i < filesNum; i++) {\n      const reader = new FileReader();\n\n      reader.onload = (evt) => {\n        const data = JSON.parse(evt.target.result);\n        \n        setImgs((prev) => [...prev, ...data.images]);\n        setTexts((prev) => [...prev, ...data.texts]);\n      }\n\n      reader.readAsText(files[i]);\n    }\n  }\n\n  // Some Listeners to control sections appearance\n  const getStartedListener = () => {\n    setGetStarted(true);\n  }\n  const finishedAnalyzing = () => {\n    setAnalyzed(true);\n    setLoading(false);\n  }\n  const toggleLearned = () => {\n    setLearned((prev) => !prev);\n  }\n  const toggleLoading = () => {\n    setLoading((prev) => !prev);\n  }\n\n  // Set Loading state from preprocessing to fetching data...etc\n  const changeLoadingState = (state) => {\n    setLoadingState(state);\n  }\n\n  return (\n    <div>\n      {loading && <Loading state={loadingState} />}\n      {testResult && \n      <TestResult \n        result={testResult} \n        hideTestResult={hideTestResult} \n      />}\n\n      {learned &&\n        <InterpretingSection \n          texts={texts} \n          images={imgs} \n          letters={letters} \n          toggleLearnedHandler={toggleLearned}\n        />\n      }\n      \n\n      <div className={`flex flex-col justify-between bg-center bg-cover bg-fixed\n      overflow-hidden ${(loading || testResult || learned) && 'filter blur-sm grayscale'}`}\n      style={{backgroundImage: `url(\"header.jpg\")`}}>\n\n        <Header \n          getStartedHandler={getStartedListener} \n        />\n        <AnalyzingSection \n          appear={getStarted}\n          showTestResultHandler={showTestResult}\n          addLetterHandler={addLetter} \n          clearLettersHandler={clear} \n          finalizeHandler={finishedAnalyzing} \n          toggleLoading={toggleLoading}\n          setLoadingStateHandler={changeLoadingState}\n        />\n        <LearningSection \n          letters={letters} \n          addToDB={addToDBListener} \n          learnedTexts={texts} \n          appear={analyzed}\n          finalizeHandler={toggleLearned} \n          saveDataHandler={saveLearningData}\n          loadDataHandler={loadLearingData}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}